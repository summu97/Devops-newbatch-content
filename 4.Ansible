
DEOPLYMENT AUTOMATED.

SERVER
SOFTWARE INSTALLATION
TOMCAT SETUP
DEOPLYMENT

ANSIBLE:
its a free and open-source tool.
its an IT engine that automates from server creation to deployment.
It is also called a configuration management tool.

configuration: cpu, memory and os
management: update, delete, install ----

ansible invented by Maichel dehaan in 2012.
ansible is taken by RedHat
We have both free and paid versions of ansible.
it is platform independent.
ansible works with YAML language.
ansible dependency is Python.
GUI for ansible is Ansible-Tower.

HOW IT WORKS ?
ARCHITECTURE:

ANSIBLE SERVER: used to communicate with worker nodes and install pkgs, deployment
WORKER NODES: takes commands from ansible server and works according to it
PLAYBOOK: conatins the code which is used to perform action.
INVENTORY: conatains info about worker nodes and group.



SETUP:
CREATE 5 SERVERS (1=ANSIBLE, 2=DEV, 2=TEST)
ALL SERVERS:
sudo -i
hostnamectl set-hostname ansible/dev-1/dev-2/test-1/test-2
sudo -i


passwd root
vim /etc/ssh/sshd_config  (38 uncomment, 63 no=yes)
systemctl restart sshd
systemctl status sshd


ANSIBLE SERVER:
amazon-linux-extras install ansible2 -y
yum install python python-pip python-dlevel -y
vim /etc/ansible/hosts (12)

[dev]
172.31.44.19
172.31.35.18
[test]
172.31.36.39
172.31.43.36

ssh-keygen #used to generate the keys 
enter 4 times
ssh-copy-id root@private-ip  -- > yes -- > password
ssh private-ip
ctrl d

NOTE: COPY THE KEYS TO ALL WORKER NODES BY USING ABOVE METHOD

=====================================================================

1. ADHOC COMMANDS:
these are simple linux comands.
used for temp works.
these commands will be over rided.

ansible all -a "yum install git -y"
ansible all -a "yum install maven -y"
ansible all -a "mvn --version"
ansible all -a "touch file1"
ansible all -a "ls"
ansible all -a "yum install httpd -y"
ansible all -a "systemctl restart httpd"
ansible all -a "systemctl status httpd"
ansible all -a "useradd raham"

INVENTORY HOST PATTREN:
ansible all --list-hosts
ansible dev --list-hosts
ansible test --list-hosts
ansible test[0] --list-hosts
ansible all[-1] --list-hosts
ansible all[1:3] --list-hosts

ANSIBLE MODULES:
modules work on key-value pair.
modules used to do the work which we want.
depend on the work module changes.

color pattren:

YELLOW	: SUCCESSFUL
RED	: FAILED
GREEN	: ALREADY DONE
BLUE	: SKIPPED

ansible all -a "yum install git -y"
ansible all -m yum -a "name=git state=present"
ansible all -m yum -a "name=docker state=present"  (present=install)
ansible all -m yum -a "name=docker state=present"  (absent=uninstall)
ansible all -m yum -a "name=docker state=latest"   (latest=update)
ansible all -m service -a "name=httpd state=started"
ansible all -m service -a "name=httpd state=stopped"
ansible all -m user -a "name=rajinikanth state=present"
ansible all -m user -a "name=rajinikanth state=absent"
ansible all -m copy -a "src=app.yml dest=/root"
ansible all -a "ls /root"

PLAYBOOKS:
playbook is a collection of modules.
we can execute multiple modules at same time.
we can reuse the playbook.
playbook will be written on YAML language.
YAML: YET ANOTHER MARKUP LANGUAGE
its a human readable and serial langauge.
yaml is syntax-based.
yaml start with --- and end with ...
we write it on list format.
extension is .yml or .yaml

PLAYBOOK1:

vim raham.yml


---
- hosts: all
  tasks:
    - name: install httpd
      yum: name=httpd state=present

    - name: start httpd
      service: name=httpd state=started

    - name: create user
      user: name=revi state=present
...


ansible-playbook raham.yml


- hosts: all
  tasks:
    - name: remove httpd
      yum: name=httpd state=absent

    - name: stop httpd
      service: name=httpd state=stopped

    - name: remove user
      user: name=revi state=absent


TAGS:
used to execute or skip a specific task

- hosts: all
  tasks:
    - name: install docker
      yum: name=docker state=present
      tags: a

    - name: start docker
      service: name=docker state=started
      tags: b

    - name: install maven
      yum: name=maven state=present
      tags: c

    - name: create user
      user: name=revi state=present
      tags: d

SINGLE TAG: ansible-playbook raham.yml --tags c
MULTI TAGS: ansible-playbook raham.yml --tags a,b
SKIP TAGS: ansible-playbook raham.yml --skip-tags "c"
MULTI SKIP TAGS: SKIP TAGS: ansible-playbook raham.yml --skip-tags "b,c"
					
SHELL VS COMMAND VS RAW

- hosts: all
  tasks:
    - name: install git
      shell: yum install git -y

    - name: install maven
      command: yum install maven -y

    - name: install docker
      raw: yum install docker -y

RAW >> COMMAND >> SHELL

sed -i 's/install/remove/g' raham.yml

- hosts: all
  tasks:
    - name: remove git
      shell: yum remove git -y

    - name: remove maven
      command: yum remove maven -y

    - name: remove docker
      raw: yum remove docker -y

ansible-playbook raham.yml

VARS:

STATIC VARS: vars which will define inside playbook.
DYNAMIC VARS: vars which are not define inside playbook.

- hosts: all
  vars:
    a: git
    b: maven
    c: docker
  tasks:
    - name: install git
      yum: name={{a}} state=present

    - name: install maven
      yum: name={{b}} state=present

    - name: install docker
      yum: name={{c}} state=present


ansible-playbook raham.yml

- hosts: all
  vars:
    a: git*
    b: maven
    c: docker
  tasks:
    - name: install git*
      yum: name={{a}} state=absent

    - name: install maven
      yum: name={{b}} state=absent

    - name: install docker
      yum: name={{c}} state=absent

ansible-playbook raham.yml


- hosts: all
  vars:
    a: git*
    b: maven
    c: docker
  tasks:
    - name: install git*
      yum: name={{a}} state=present

    - name: install maven
      yum: name={{b}} state=present

    - name: install docker
      yum: name={{c}} state=present

    - name: install pkg
      yum: name={{d}} state=present

ansible all -a "yum remove git* maven* docker* tree* -y"

=====================

- hosts: all
  vars:
    a: git
    b: maven
    c: docker
  tasks:
    - name: install git*
      yum: name={{a}} state=present

    - name: install maven
      yum: name={{b}} state=present

    - name: install docker
      yum: name={{c}} state=present

    - name: install {{d}}
      yum: name={{d}} state=present

    - name: install {{e}}
      yum: name={{e}} state=present


 single var: ansible-playbook raham.yml --extra-vars "d=tree"
 multi var: ansible-playbook raham.yml --extra-vars "d=tree e=java-1.8.0-openjdk"

sed -i "s/present/absent/g" raham.yml
 multi var: ansible-playbook raham.yml --extra-vars "d=tree e=java-1.8.0-openjdk"

LOOPS:

- hosts: all
  tasks:
    - name: install pkgs
      yum: name={{item}} state=present
      with_items:
        - git
        - maven
        - docker
        - htppd
        - tree


- hosts: all
  tasks:
    - name: create users
      user: name={{item}} state=present
      with_items:
        - jayanth
        - delidemir
        - ramesh
        - kowshik
        - revi
        - manikanta
        - sravanthi
        - sarvani
        - nikitha
        - sadekaa


TROUBLESHOOTING:
ansible all -m setup | grep -i cpus
ansible all -m setup | grep -i mem


HANDLERS: here one task depends on another task.
when task-1 is executed it will call task-2 to perform the action.
ex: if we want to restart httpd we need to install it
restarting depends on installing.
Note: here we have notify module.

- hosts: all
  tasks:
    - name: installing apache on RedHat
      yum: name=httpd state=present
      notify: starting apache
  handlers:
    - name: starting apache
      service: name=httpd state=started

ansible all -a "systemctl status httpd"


ANSIBLE VAULT:
it is used to encrypt the files, playbooks ----
Technique: AES256 (USED BY FACEBOOK)
vault will store our data very safely and securely.
if we want to access any data which is in the vault we need to give a password.
Note: we can restrict the users to access the playbook aslo.

ansible-vault create creds1.txt		: to create a vault
ansible-vault edit creds1.txt		: to edit a vault
ansible-vault rekey creds1.txt		: to change password for a vault
ansible-vault decrypt creds1.txt	: to decrypt the content	
ansible-vault encrypt creds1.txt	: to encrypt the content	
ansible-vault view creds1.txt		: to show the content without decrypt
	
PIP: its a pkg manager used to install python libs/modules

Redhat: yum
ubuntu: apt
python: pip



- hosts: all
  tasks:
    - name: installing pip
      yum: name=pip state=present

    - name: installing NumPy
      pip: name=Numpy state=present


- hosts: all
  tasks:
    - name: installing pip
      yum: name=pip state=present

    - name: installing Pandas
      pip: name=Pandas state=present


ANSIBLE SETUP MODULES: Used to print the complete info of worker nodes.

ROLES: 
used to divide the playbook into directory structures.
we can organize the playbooks.
we can encapsulate the data.
we can reduce the playbook length.

mkdir playbooks
cd playbooks
yum install tree -y


.
├── master.yml
└── roles
    ├── file
    │   └── tasks
    │       └── main.yml
    ├── one
    │   └── tasks
    │       └── main.yml
    └── raham
        └── tasks
            └── main.yml


mkdir -p roles/one/tasks
vim roles/one/tasks/main.yml

- name: installing maven
  yum: name=maven state=present

vim roles/raham/tasks/main.yml
- name: create user
  user: name=srikanth state=present

vim roles/file/tasks/main.yml
- name: create a file
  shell: touch file22

vim master.yml

- hosts: all
  roles:
    - one
    - raham
    - file

ansible-playbook master.yml

ANSIBLE-GALAXY: used to store playbooks like code on github.

ansible-galaxy search java
ansible-galaxy install akhilesh9589.tomcat
ansible-galaxy search --author alikins



===============================================

ansible_hostname
ansible_memfree_mb
ansible_memtotal_mb
ansible_os_family
ansible_pkg_mgr
ansible_processor_vcpus


Debug: used to print the msgs/customize ops

- hosts: all
  tasks:
    - name: to pring mgs
      debug:
        msg: "the node name os: {{ansible_hostname}}, the total mem is: {{ansible_memtotal_mb}}, free mem is {{ansible_memfree_mb}}, the flavour of ec2 is: {{ansible_os_family}}, toto cpus is: {{ansible_processor_vcpus}}"

JINJA2 TEMPLATE: used to get the customized op, here its a text file which can extract the variables and these values will change as per time.'

LOOKUPS: this module used to get data from files, db and key-values


- hosts: dev
  vars:
    a: "{{lookup('file', '/root/creds.txt') }}"
  tasks:
    - debug:
        msg: "hai my user name is {{a}}"

cat creds.txt
user=raham

STRATAGIES:

LINEAR: execute tasks sequencially
FREE: execute all tasks on all node at same time
ROLLING:
SEQUENC:
BATCH:

 hosts: dev
  gather_facts: false
  strategy: free
  vars:
    a: "{{lookup('file', '/root/creds.txt') }}"
  tasks:
    - debug:
        msg: "hai my user name is {{a}}"

=============================================================================

LAMP:
L : LINUX
A : APACHE
M : MYSQL
P : PHP



---
- hosts: all
  tasks:
    - name: installing apache
      yum: name=httpd state=present
    - name: installing mysql
      yum: name=mysql state=present
    - name: installing python
      yum: name=python3 state=present

=============================================================================

NETFLIX DEPLOPYMET:

- hosts: test
  tasks:
    - name: installing apache server
      yum: name=httpd state=present

    - name: activating apache server
      service: name=httpd state=started

    - name: installing git
      yum: name=git state=present

    - name: git checkout
      git:
        repo: "https://github.com/CleverProgrammers/pwj-netflix-clone.git"
        dest: "/var/www/html"

TOMCAT SETUP:
USE TOMCAT.YML, CONTEXT.XML AND TOMCAT-USER.XML FROM BELOW REPO
https://github.com/RAHAMSHAIK007/all-setups.git

CONDITIONS:
CLUSTER: GROUP OF NODES/SERVERS

HOMOGENIUS: SERVERS WITH SAME OS AND FLAVOUR
HETEROGENEOUS: SERVERS WITH DIFFERENT OS AND FLAVOUR


- hosts: all
  tasks:
    - name: installing git* on RedHat
      yum: name=git* state=present
      when: ansible_os_family == "RedHat"

    - name: installing git* on Ubuntu
      apt: name=git* state=present
      when: ansible_os_family == "Debian"

sed -i 's/present/absent/g' raham.yml

EX-2:

- hosts: all
  tasks:
    - name: installing apache on RedHat
      yum: name=httpd state=present
      when: ansible_os_family == "RedHat"

    - name: installing apache on Ubuntu
      apt: name=apache2 state=present
      when: ansible_os_family == "Debian"

sed -i 's/present/absent/g' raham.yml

PIP: package manager for python.
when ever you wanto install any python related librariers or something use "pip" modele.
ex:yum install pip -y
pip install NumPy
pip install Panda

NumPy, which stands for "Numerical Python," is a powerful library in Python for numerical and mathematical operations.
pip install numpy

Pandas is commonly used in data analysis, data cleaning, and preparation tasks, as well as in combination with other libraries
like NumPy and Matplotlib for comprehensive data analysis and visualization.
